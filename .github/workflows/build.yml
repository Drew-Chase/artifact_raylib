name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggers

env:
  BUILD_TYPE: Release
  VCPKG_COMMIT: '5a1b13ca83f32c01d40a779747b5cb59d359ac2f' # Matches builtin-baseline from vcpkg.json

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc-12",
            cxx: "g++-12"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
      - uses: actions/checkout@v3

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            gcc-12 \
            g++-12 \
            xorg-dev \
            libglu1-mesa-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_COMMIT }}

      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          git checkout ${{ env.VCPKG_COMMIT }}
          ./bootstrap-vcpkg${{ runner.os == 'Windows' && '.bat' || '.sh' }}

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -G Ninja `
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
            -DPROFILE_NAME=shared `
            -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake
        shell: pwsh

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifact_raylib-${{ runner.os }}
          path: |
            ${{github.workspace}}/bin/artifact_raylib/**/*
          if-no-files-found: error

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: "Automated Build ${{ github.sha }}"
          tag_name: "build-${{ github.sha }}"
          draft: false
          prerelease: true
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
