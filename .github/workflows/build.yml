name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Manual trigger with parameters
    inputs:
      build_type:
        description: 'Build Type (Release/Debug)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: false
        type: boolean
      release_type:
        description: 'Release Type'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - release
      custom_tag:
        description: 'Custom Release Tag (leave empty for auto-generated)'
        required: false
        type: string

env:
  BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.build_type || 'Release' }}
  VCPKG_COMMIT: '5a1b13ca83f32c01d40a779747b5cb59d359ac2f' # Matches builtin-baseline from vcpkg.json

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc-12",
            cxx: "g++-12"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            gcc-12 \
            g++-12 \
            xorg-dev \
            libglu1-mesa-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-${{ env.VCPKG_COMMIT }}

      - name: Setup vcpkg
        shell: bash
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
          fi
          cd vcpkg
          git fetch
          git checkout ${{ env.VCPKG_COMMIT }}
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi

      - name: Verify vcpkg setup
        shell: bash
        run: |
          if [ ! -f "${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake" ]; then
            echo "vcpkg toolchain file not found!"
            exit 1
          fi

      - name: Configure CMake Windows
        if: runner.os == 'Windows'
        shell: cmd
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -B ${{github.workspace}}/build ^
          -G Ninja ^
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ^
          -DPROFILE_NAME=shared ^
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Configure CMake Unix
        if: runner.os != 'Windows'
        shell: bash
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          cmake -B ${{github.workspace}}/build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DPROFILE_NAME=shared \
            -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Build Unix
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact_raylib-${{ runner.os }}-${{ env.BUILD_TYPE }}
          path: |
            ${{github.workspace}}/bin/artifact_raylib/**/*
          if-no-files-found: error

  release:
    needs: build
    if: >-
      (github.event_name == 'workflow_dispatch' && inputs.create_release) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release tag
        id: tag
        run: |
          if [[ "${{ github.event.inputs.custom_tag }}" != "" ]]; then
            echo "tag=${{ github.event.inputs.custom_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          files: artifacts/**/*
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          generate_release_notes: true