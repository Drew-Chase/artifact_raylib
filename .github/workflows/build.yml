name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Manual trigger with parameters
    inputs:
      build_type:
        description: 'Build Type (Release/Debug)'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: false
        type: boolean
      release_type:
        description: 'Release Type'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - release
      custom_tag:
        description: 'Custom Release Tag (leave empty for auto-generated)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  deployments: write

env:
  BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.build_type || 'Release' }}

jobs:
  build:
    name: ${{ matrix.config.name }}-${{ matrix.profile.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc-12",
            cxx: "g++-12"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }
        profile:
          - {
            name: "minimal",
            script_name: "minimal",
          }
          - {
            name: "standalone",
            script_name: "standalone",
          }

    steps:
      - uses: actions/checkout@v4

      - name: Make Unix scripts executable
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x scripts/unix/*.sh

      - name: Verify Unix scripts are executable
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ -d "scripts/unix" ]; then
            for script in scripts/unix/*.sh; do
              if [ -f "$script" ] && [ ! -x "$script" ]; then
                echo "Error: $script is not executable"
                exit 1
              fi
            done
          fi
          echo "All Unix scripts are correctly set as executable."

      - name: Install Conan
        run: |
          pip install conan

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            gcc-12 \
            g++-12 \
            xorg-dev \
            libglu1-mesa-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Setup environment variables
        shell: bash
        run: |
          echo "CC=${{ matrix.config.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.config.cxx }}" >> $GITHUB_ENV

      - name: Configure Conan profile
        run: |
          conan profile detect --force 

      - name: Install dependencies with Conan (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call scripts\windows\conan-install.bat

      - name: Install dependencies with Conan (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ./scripts/unix/conan-install.sh

      - name: Build Project (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call scripts\windows\${{ matrix.profile.script_name }}.bat

      - name: Build Project (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ./scripts/unix/${{ matrix.profile.script_name }}.sh

      - name: Get Binary Name
        id: get-binary-name
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "BINARY_PATH=bin/artifact_raylib/${{ matrix.profile.script_name }}/artifact_raylib-Windows-*-${{ matrix.profile.script_name }}.exe" >> $GITHUB_ENV
            echo "BINARY_NAME=artifact_raylib-Windows-${{ matrix.profile.script_name }}.exe" >> $GITHUB_ENV
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "BINARY_PATH=bin/artifact_raylib/${{ matrix.profile.script_name }}/artifact_raylib-Darwin-*-${{ matrix.profile.script_name }}" >> $GITHUB_ENV
            echo "BINARY_NAME=artifact_raylib-macOS-${{ matrix.profile.script_name }}" >> $GITHUB_ENV
          else
            echo "BINARY_PATH=bin/artifact_raylib/${{ matrix.profile.script_name }}/artifact_raylib-Linux-*-${{ matrix.profile.script_name }}" >> $GITHUB_ENV
            echo "BINARY_NAME=artifact_raylib-Linux-${{ matrix.profile.script_name }}" >> $GITHUB_ENV
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.BINARY_PATH }}
          if-no-files-found: error

      # Create release if requested in manual workflow run
      - name: Determine Release Information
        if: github.event_name == 'workflow_dispatch' && inputs.create_release == true
        id: release_info
        shell: bash
        run: |
          timestamp=$(date +'%Y%m%d%H%M%S')
          if [[ "${{ inputs.custom_tag }}" == "" ]]; then
            echo "TAG_NAME=v$timestamp" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ inputs.custom_tag }}" >> $GITHUB_ENV
          fi
          
          echo "RELEASE_NAME=Release ${{ env.TAG_NAME }}" >> $GITHUB_ENV
          echo "IS_PRERELEASE=${{ inputs.release_type == 'prerelease' }}" >> $GITHUB_ENV

      - name: Download All Artifacts for Release
        if: github.event_name == 'workflow_dispatch' && inputs.create_release == true && matrix.config.name == 'Windows Latest MSVC' && matrix.profile.name == 'minimal'
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create Release
        if: github.event_name == 'workflow_dispatch' && inputs.create_release == true && matrix.config.name == 'Windows Latest MSVC' && matrix.profile.name == 'minimal'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            release_artifacts/**/*